#!/bin/bash
# Runs autoperf experiments on Arya
# NOTE: You may need to execute
#       . run build
# To get the environment variables to stick.
# TODO: Add editing to shell script
USAGE="usage: ./run generate_data|build|autoperf|all"

# Parse command line options
cmd="$1"
if [ -z "$cmd" -o "$cmd" = "-h" -o "$cmd" = "--help" ]; then
	echo $USAGE
	exit 2
fi

# Initialization
LIB_DIR="$(pwd)/lib"
module load tau # Also loads PAPI
export TAU_MAKEFILE="$TAU_DIR/x86_64/lib/Makefile.tau-papi-openmp"
DDIR=/home/users/spollard/graphalytics/all-datasets/PBBSInput
SCALES="16 18 20" # Make sure to have SCALES be the same as what's in autoperf.cfg

# Define commands to be run
generate_data()
{
	for S in $SCALES; do
		echo "Creating weighted rmat with 2^$S vertices and ~16 x 2^$S edges" # LOG
		N=$(echo 2 ^ $S | bc)
		M=$(echo $N '* 16' | bc)
		TMP_FILE="$DDIR/rmat$S.eg"
		INPUT_FILE="$DDIR/rmat$S.weg"
		if [ ! -r "$INPUT_FILE" ]; then
			"$PBBS_DIR/graphData/rMatGraph" -a 0.57 -b 0.19 -c 0.19 -d 0.05 -m $M $N $TMP_FILE
			"$PBBS_DIR/graphData/addWeights" $TMP_FILE $INPUT_FILE
			echo "saved to $DDIR/rmat$S.weg" # LOG
		else
			echo "file already exists at $DDIR/rmat$S.weg, avoiding overwriting." # LOG
		fi
	done
}

build_autoperf()
{
	if [ -z "$SQLITE3" ]; then
		echo "You may need SQLITE3 environment variable for autoperf. Trying to get it with dpkg."
		export SQLITE3=$(dirname $(dpkg -L libsqlite3-dev | grep .so)) # Needed for autoperf
		if [ -z "$SQLITE3" ]; then
			echo "Unable to find SQLITE3 library"
			exit 1
		fi
	fi
	if [ -z "$PAPI" ]; then
		echo "Please set the PAPI environment variable"
		exit 1
	fi
	# Download autoperf and add it to your PATH
	AUTOPERF_LOC=$(command -v autoperf) # Check if autoperf is already in path
	if [ $? -ne 0 ]; then
		echo "Installing autoperf"
		git clone https://github.com/HPCL/autoperf.git "$HOME/autoperf"
		cd "$HOME/autoperf"
		python setup.py install --user
	else
		echo "found autoperf at $AUTOPERF_LOC"
	fi
}

build_Galois()
{
	GALOIS_DIR="$LIB_DIR/Galois-2.2.1"
    module load boost-1.63.0-gcc-4.8-hucoocn
    cd "$GALOIS_DIR/build"
    mkdir -p release
    cd release
    cmake -DCMAKE_Fortran_COMPILER=gfortran-4.8 ../../ 
}

build_PBBS()
{
	PBBS_DIR="$LIB_DIR/pbbs-msf"
}

run_autoperf()
{
	autoperf
}

# Execute
if [ "$cmd" = generate_data -o "$cmd" = all ]; then
	generate_data
fi
if [ "$cmd" = build -o "$cmd" = all ]; then
	build_autoperf
    build_Galois
	build_PBBS
fi
if [ "$cmd" = autoperf -o "$cmd" = all ]; then
	run_autoperf
fi

